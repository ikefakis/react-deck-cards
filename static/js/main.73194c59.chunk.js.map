{"version":3,"sources":["index.js","photos.js"],"names":["cards","url","orientation","to","i","x","y","scale","rot","Math","random","delay","trans","r","s","render","useState","Set","gone","useSprings","length","from","props","set","bind","useGesture","index","args","down","xDelta","delta","xDir","distance","direction","velocity","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","div","key","style","transform","interpolate","backgroundImage","width","height","document","getElementById"],"mappings":"gOAOMA,G,MCJK,CACH,CAAEC,IAAK,aAAcC,YAAa,YAClC,CAAED,IAAK,aAAcC,YAAa,aAClC,CAAED,IAAK,aAAcC,YAAa,YAClC,CAAED,IAAK,aAAcC,YAAa,aAClC,CAAED,IAAK,aAAcC,YAAa,cDEpCC,EAAK,SAAAC,GAAC,MAAK,CAAEC,EAAG,EAAGC,GAAQ,EAALF,EAAQG,MAAO,EAAGC,IAA2B,GAAhBC,KAAKC,SAAV,GAAyBC,MAAW,IAAJP,IAG9EQ,EAAQ,SAACC,EAAGC,GAAJ,0DAAuDD,EAAI,GAA3D,wBAA6EA,EAA7E,sBAA4FC,EAA5F,MAgCdC,iBAAO,mBA9BP,WAAiB,IAAD,EACCC,oBAAS,kBAAM,IAAIC,OAA3BC,EADO,sBAEOC,YAAWnB,EAAMoB,QAAQ,SAAAhB,GAAC,sBAAUD,EAAGC,GAAb,CAAiBiB,KAN/C,CAAEhB,EAAG,EAAGG,IAAK,EAAGD,MAAO,IAAKD,GAAI,UAInC,mBAEPgB,EAFO,KAEAC,EAFA,KAIRC,EAAOC,aAAW,YAAsF,IAA5EC,EAA2E,cAAlFC,KAAkF,MAAnEC,EAAmE,EAAnEA,KAAcC,EAAqD,cAA7DC,MAA6D,MAAtBC,GAAsB,EAA5CC,SAA4C,cAAlCC,UAAkC,OAAfC,EAAe,EAAfA,SAEtFC,EAAMJ,EAAO,GAAK,EAAI,GACvBH,GAFWM,EAAW,IAELhB,EAAKkB,IAAIV,GAC/BH,GAAI,SAAAnB,GACF,GAAIsB,IAAUtB,EAAd,CACA,IAAMiC,EAASnB,EAAKoB,IAAIZ,GAIxB,MAAO,CAAErB,EAHCgC,GAAU,IAAME,OAAOC,YAAcL,EAAMP,EAAOC,EAAS,EAGzDrB,IAFAqB,EAAS,KAAOQ,EAAe,GAANF,EAAWD,EAAW,GAE1C3B,MADHqB,EAAO,IAAM,EACHjB,WAAO8B,EAAWC,OAAQ,CAAEC,SAAU,GAAIC,QAAShB,EAAO,IAAMS,EAAS,IAAM,UAEpGT,GAAQV,EAAK2B,OAAS7C,EAAMoB,QAAQ0B,YAAW,kBAAM5B,EAAK6B,SAAWxB,GAAI,SAAAnB,GAAC,OAAID,EAAGC,QAAK,QAG7F,OAAOkB,EAAM0B,KAAI,WAAuB5C,GAAvB,IAAGC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAGE,EAAT,EAASA,IAAKD,EAAd,EAAcA,MAAd,OACf,kBAAC,IAAS0C,IAAV,CAAcC,IAAK9C,EAAG+C,MAAO,CAC3BC,UAAWC,YAAY,CAAChD,EAAGC,IAAI,SAACD,EAAGC,GAAJ,4BAAyBD,EAAzB,cAAgCC,EAAhC,cAE/B,kBAAC,IAAS2C,IAAV,iBAAkBzB,EAAKpB,GAAvB,CAA2B+C,MAAO,CAAEC,UAAWC,YAAY,CAAC7C,EAAKD,GAAQK,GAAQ0C,gBAAgB,OAAD,OAAStD,EAAMI,GAAGH,IAAlB,KAChGsD,MAAgC,aAAzBvD,EAAMI,GAAGF,YAA6B,QAAU,QACvDsD,OAAiC,aAAzBxD,EAAMI,GAAGF,YAA6B,QAAU,kBAKvD,MAAUuD,SAASC,eAAe,gB","file":"static/js/main.73194c59.chunk.js","sourcesContent":["import { render } from 'react-dom'\r\nimport React, { useState } from 'react'\r\nimport { useSprings, animated, interpolate } from 'react-spring'\r\nimport { useGesture } from 'react-use-gesture'\r\nimport './styles.css'\r\nimport { photos } from './photos.js'\r\n\r\nconst cards = photos();\r\n\r\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\r\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\r\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\r\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\r\nconst trans = (r, s) => `perspective(1500px) rotateX(0deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\r\n\r\nfunction Deck() {\r\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\r\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\r\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\r\n  const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\r\n    const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\r\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\r\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\r\n    set(i => {\r\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\r\n      const isGone = gone.has(index)\r\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\r\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\r\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\r\n      return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\r\n    })\r\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600)\r\n  })\r\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\r\n  return props.map(({ x, y, rot, scale }, i) => (\r\n    <animated.div key={i} style={{\r\n      transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}>\r\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\r\n      <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards[i].url})`,\r\n      width: cards[i].orientation === 'portrait' ? '240px' : '320px',\r\n      height: cards[i].orientation === 'portrait' ? '320px' : '240px' }} />\r\n    </animated.div>\r\n  ))\r\n}\r\n\r\nrender(<Deck />, document.getElementById('photo-deck'))\r\n","// orientation: (portrait | landscape)\r\n\r\nexport const photos = () => {\r\n    return [\r\n        { url: 'img/05.jpg', orientation: 'portrait' },\r\n        { url: 'img/04.jpg', orientation: 'landscape' },\r\n        { url: 'img/03.jpg', orientation: 'portrait' },\r\n        { url: 'img/02.jpg', orientation: 'landscape' },\r\n        { url: 'img/01.jpg', orientation: 'portrait' }\r\n    ]\r\n};\r\n"],"sourceRoot":""}